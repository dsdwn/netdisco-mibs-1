#!/usr/bin/env perl
# compare new_mib_file
# will run a diff against the version of the same MIB in netdisco-mibs

use strict;
use warnings;

use File::Temp;
use File::Basename;
use File::Spec::Functions qw(splitdir catfile);
use List::MoreUtils 'singleton';

use FindBin;
use lib catfile($FindBin::Bin, 'lib');
use Helpers;

my $newmib = shift;
if (!defined $newmib or not -f $newmib) {
  print "usage: $0 new_mib_file\n";
  exit(1);
}

# make an index so we know what's in the file
my ($mibs_for, $files_for) = build_index($newmib);
#use se DDP; p $mibs_for; p $files_for;

if ((scalar keys %$files_for) == 0) {
  print "error: unable to parse MIB DEFINITIONS in $newmib\n";
  exit(1);
}

print "\N{EYES} Scanning for matching MIBs\n";
my ($file_mibs, $vendor_mibs, $mib_files, $vendor_files) = mkindex();

my $mib = (keys %$files_for)[0];
unless (exists $mib_files->{$mib}) {
  print "error: MIB $mib is unknown to netdisco-mibs\n";
  exit(1);
}

# find a candidate file to compare, or abort
my @mibset = keys %$files_for;
my @fileset = grep { (scalar singleton (@mibset, @{ $file_mibs->{$_} })) == 0 } keys %$file_mibs;
if (scalar @fileset > 1) {
    print "error: multiple candidate files to compare:\n";
    print join "\n", @fileset, '';
    exit(1);
}
if (scalar @fileset == 0) {
    print "error: no netdisco-mibs file has the same MIBs in it:\n";
    print join "\n", @mibset, '';
    exit(1);
}

# run a diff
my $oldmib = catfile($ENV{MIBHOME}, $mib_files->{$mib}->[0]);
exec(qq{diff -b -B -w --strip-trailing-cr '$oldmib' '$newmib' | less});
